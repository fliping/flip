#!/usr/local/bin/luvit
-- -*- mode: lua; tab-width: 2; indent-tabs-mode: 1; st-rulers: [70] -*-
-- vim: ts=4 sw=4 ft=lua noet
---------------------------------------------------------------------
-- @author Daniel Barney <daniel@pagodabox.com>
-- @copyright 2014, Pagoda Box, Inc.
-- @doc
--
-- @end
-- Created :   4 Feb 2015 by Daniel Barney <daniel@pagodabox.com>
---------------------------------------------------------------------
local logger = require('./lib/logger')
local os = require('os')
local JSON = require('json')
local http = require('http')

local store = 
	{fetch = function(bucket,id) return request('get',bucket,id,nil) end
	,delete = function(bucket,id) return request('delete',bucket,id,nil) end
	,store = function(bucket,id,data) return request('post',bucket,id,data) end}

function main()
	if process.argv[1] == '-server' then
		table.remove(process.argv,1)
		logger:info("entering server mode")
		require('./flip_server')
	else
		logger:add_logger('info','console',function(...) p(os.date("%x %X"),...) end)
		logger:info("entering cli mode")
		local system = table.remove(process.argv,1)
		local command = table.remove(process.argv,1)
		logger:info("making request",system,command)
		request('get','systems',system,nil,function(result,err)
			logger:info(result,err)
			if err == "not found" then
				logger:error("command was not found",system,command)
				process.exit(1)
			elseif err then
				logger:error(err)
				process.exit(1)
			elseif result.cli and result.cli[command] then
				logger:info("running script",result.cli[command])
				request('get',system,result.cli[command],nil,function(result,err)
					if err then
						logger:error("command was not found",system,command)
						process.exit(1)
					elseif result and result['$script'] then
						logger:debug("running script",result)
						local fn,err = loadstring(result['$script'], '@store/system:' .. system .. '/command:' .. command)
						if err then
							logger:error("script failed to compile",err)
						else
							-- set the env
							setfenv(fn,
								{__filename = id
								,__dirname = bucket
								,pairs = pairs
								,logger = logger
								,require = local_require
								,store = store})

							-- and now we run the script!
							fn()(unpack(process.argv))
						end
					else
						logger:error("command was not found",system,command)
						process.exit(1)
					end
				end)
			else
				logger:error("command was not found",system,command)
				process.exit(1)		
			end
		end)
			
	end
end

function request(method,bucket,id,data,cb)
	local path
	if id then
		path = "/store/" .. bucket .. "/" .. id
	else
		path = "/store/" .. bucket
	end
	local options =
			{host = "127.0.0.1" -- these need to be pulled from the config file...
			,port = 8081
			,method = method
			,path = path}
	if data then
		data = JSON.stringify(data)
		options.headers = 
			{["content-length"] = #data
			,["content-type"] = "application/json"}
	end
	local req = http.request(options, function (res)
		local chunks = {}
		res:on('data', function (chunk)
			chunks[#chunks + 1] = chunk
			end)
		res:on('end',function()
			if (res.status_code > 199) and (res.status_code < 300) then
				local result = JSON.parse(table.concat(chunks))
				cb(result)
			elseif res.status_code == 404 then
				cb(nil,"not found")
			else
				cb(nil,res.status_code ..": "..table.concat(chunks))
			end
		end)
	end)
	req:on('error',cb)
	req:done(data)
end

function local_require(object)
	local sucess,ret = pcall(require,object)
	if sucess then
		logger:info("required a local thing")
		return unpack(ret)
	else
		logger:warning('I need to require a remote script')
	end
end

main()