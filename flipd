#!/usr/local/bin/luvit
-- -*- mode: lua; tab-width: 2; indent-tabs-mode: 1; st-rulers: [70] -*-
-- vim: ts=4 sw=4 ft=lua noet
---------------------------------------------------------------------
-- @author Daniel Barney <daniel@pagodabox.com>
-- @copyright 2014, Pagoda Box, Inc.
-- @doc
--
-- @end
-- Created :   4 Sept 2014 by Daniel Barney <daniel@pagodabox.com>
---------------------------------------------------------------------

local fs = require('fs')
local os = require('os')
local JSON = require('json')
local math = require('math')
local utils = require('utils')
local hrtime = require('uv').Process.hrtime
local Flip = require('./flip')
local logger = require('./lib/logger')


-- init the random seed for later when it is used
math.randomseed(hrtime())

-- set up default location for the config file
local configPath = "/opt/local/etc/flip/flip.conf"

-- it can be specified with the first parameter to the command
if process.argv[1] then
	configPath = process.argv[1]
end

if configPath == '-h' then
	p("usage: flipd [path/to/config/file]")
	process.exit(0)
else

	local validate_config = function(config)
		-- ensure that all requires values are in the config file
		local ensure = function(value,name,...)
			if not value then
				if not name then
					logger:fatal(...)
				else
					logger:fatal('config is missing required field \''.. name ..'\'')
				end
				process.exit(1)	
			end
		end

		-- pad the key

		config.key = config.key:sub(0,32) .. string.rep("0",32 - math.min(32,config.key:len()))

		ensure(config.id,'id')
		ensure(config.gossip,'gossip')
		ensure(config.gossip.ip,'gossip.ip')
		ensure(config.gossip.port,'gossip.port')
		ensure(config.api,'api')
		ensure(config.api.ip,'api.ip')
		ensure(config.api.port,'api.port')
	end

	-- load config file
	fs.readFile(configPath,function(err,data)
		if err then
			p('unable to load config file',err)
			process.exit(1)
		else
			local config = JSON.parse(data)
			if config.log_level and logger:valid_level(config.log_level) then
				logger:add_logger(config.log_level,'console',function(...) p(os.date("%x %X"),...) end)
			else
				logger:add_logger('info','console',function(...) p(os.date("%x %X"),...) end)
			end
			validate_config(config)
			local flip = Flip:new(config)

			logger:info('starting up flip',config)

			flip:start()
		end
	end)
end